generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  image     String?
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  Assets    Assets[]
  accounts  Account[]
  sessions  Session[]
}

enum Role {
  USER
  EDITOR
  ADMIN
}

model Assets {
  assetId               Int       @id @default(autoincrement())
  title                 String
  url                   String
  uploadUser            User?     @relation(fields: [uploadUserId], references: [id])
  uploadUserId          String
  uplishedAt            DateTime  @default(now())
  type                  String
  size                  Int
  base                  String
  width                 Int?
  height                Int?
  Make                  String?
  Model                 String?
  LensMake              String?
  LensModel             String?
  ExposureTime          String?
  ApertureValue         String?
  FNumber               String?
  ExposureProgram       String?
  ISOSpeedRatings       String?
  DateTimeOriginal      DateTime?
  ExposureBiasValue     String?
  MaxApertureValue      String?
  MeteringMode          String?
  Lightsource           String?
  Flash                 String?
  FocalLength           String?
  FocalLengthIn35mmFilm String?
  GPSLatitude           String?
  GPSLongitude          String?
  GPSAltitude           String?
  Photo                 Photo[]
  info                  Json?
}

model Photo {
  id         String  @id @default(cuid())
  title      String?
  asset      Assets? @relation(fields: [assetId], references: [assetId])
  assetId    Int
  createdAt  DateTime?  @default(now())
  info       Json?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Site {
  id   String @id @default(cuid())
  name String
  url  String
}
