generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                         @id @default(cuid())
  uid                   String?                        @unique
  name                  String
  email                 String                         @unique
  image                 String?
  role                  Role                           @default(USER)
  createdAt             DateTime                       @default(now())
  Assets                Assets[]
  post                  Post[]
  draftPaper            DraftPaper[]
  authorizedCollections AuthorizedUsersOnCollections[]
  collection            Collection[]
}

enum Role {
  USER
  EDITOR
  ADMIN
}

model Assets {
  assetId               Int       @id @default(autoincrement())
  title                 String
  url                   String
  uploadUser            User?     @relation(fields: [uploadUserId], references: [id])
  uploadUserId          String
  uplishedAt            DateTime  @default(now())
  type                  String
  size                  Int
  base                  String
  width                 Int?
  height                Int?
  Make                  String?
  Model                 String?
  LensMake              String?
  LensModel             String?
  ExposureTime          String?
  ApertureValue         String?
  FNumber               String?
  ExposureProgram       String?
  ISOSpeedRatings       String?
  DateTimeOriginal      DateTime?
  ExposureBiasValue     String?
  MaxApertureValue      String?
  MeteringMode          String?
  Lightsource           String?
  Flash                 String?
  FocalLength           String?
  FocalLengthIn35mmFilm String?
  GPSLatitude           String?
  GPSLongitude          String?
  GPSAltitude           String?
  Photo                 Photo[]
  info                  Json?
}

model Photo {
  id             String      @id @default(cuid())
  title          String?
  asset          Assets?     @relation(fields: [assetId], references: [assetId])
  assetId        Int
  createdAt      DateTime?   @default(now())
  info           Json?
  collection     Collection? @relation(fields: [collectionSlug], references: [slug])
  collectionSlug String?
  category       Category?   @relation(fields: [categoryId], references: [id])
  categoryId     Int?
  tag            Tag?        @relation(fields: [tagId], references: [id])
  tagId          Int?
}

model Post {
  id             Int         @id @default(autoincrement())
  user           User        @relation(fields: [userId], references: [id])
  userId         String
  currentDraft   DraftPaper? @relation(fields: [currentDraftId], references: [id])
  currentDraftId Int
  currentVersion Int?
  Title          String
  History        Json?
  createdAt      DateTime    @default(now())
  uplishedAt     DateTime?
  published      Boolean     @default(false)
  deleted        Boolean     @default(false)
  deletedAt      DateTime?
  category       Category?   @relation(fields: [categoryId], references: [id])
  categoryId     Int?
  tag            Tag?        @relation(fields: [tagId], references: [id])
  tagId          Int?
  collection     Collection? @relation(fields: [collectionSlug], references: [slug])
  collectionSlug String?
}

model DraftPaper {
  id         Int       @id @default(autoincrement())
  user       User?     @relation(fields: [userId], references: [id])
  userId     String
  post       Post[]
  createdAt  DateTime  @default(now())
  uplishedAt DateTime?
  mainText   Json
}

model Category {
  id    Int     @id @default(autoincrement())
  name  String
  post  Post[]
  photo Photo[]
}

model Tag {
  id    Int     @id @default(autoincrement())
  name  String
  post  Post[]
  photo Photo[]
}

model Collection {
  id             Int                            @id @default(autoincrement())
  slug           String?                        @unique
  name           String
  info           Json?
  admin          User                           @relation(fields: [adminId], references: [id])
  adminId        String
  authorizedUser AuthorizedUsersOnCollections[]
  post           Post[]
  photo          Photo[]
}

model AuthorizedUsersOnCollections {
  collection       Collection @relation(fields: [collectionId], references: [id])
  collectionId     Int
  authorizedUser   User       @relation(fields: [authorizedUserId], references: [id])
  authorizedUserId String
  assignedAt       DateTime   @default(now())

  @@id([collectionId, authorizedUserId])
}
